esphome:
  name: mud-kitchen
  on_boot:
    then:
      - delay: 10s
      - logger.log:
          format: "Starting Relay Updater"
          level: DEBUG
      - script.execute: set_relays

esp32:
  board: esp32-s2-saola-1 # Standard ESP32-S2 Board
  framework:
    #type: esp-idf # platformio doesn't seem to work very well for the S2 as of writing this.
    type: arduino
    
# Enable logging
logger:
  level: DEBUG
  baud_rate: 0 # Disable 
  #hardware_uart: USB_CDC # This is to release a UART for the relay controller.

# Enable Home Assistant API
api: # Usually i'd just ise MQTT, but I have been having good luck with this lately.

ota:
  password: !secret ota_password

wifi:
  # use_address: mud-kitchen-test.local
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
#  - ssid: !secret bp_wifi_ssid
#    password: !secret bp_wifi_password

# MQTT Disabled so i primerally can use HA API
#mqtt:
#  broker: mqtt.valkenb.org
#  username: !secret mqtt_username
#  password: !secret mqtt_password

# Handy for monitoring when starting up. Uses LED built onto the board.
light:
  - platform: status_led
    name: "Mud Kitchen Status"
    pin: GPIO15
    
# 2X UARTs. One for each relay. The S2 has very good pin mapping for the UART.
uart:

  - tx_pin: GPIO09
    id: uart1
    baud_rate: 115200

  - tx_pin: GPIO11
    id: uart2
    baud_rate: 115200

switch:

  - platform: restart
    name: "Mud Kitchen Restart"

  # Relay that connects the solar panel to the battery.
  # I use normally open so all relays can be off while we wait for the sun to come out.
  - platform: template
    name: 'Mud Kitchen Connect Solar Panel'
    id: connect_solar_panel
    optimistic: true
    #restore_mode: ALWAYS_OFF
    turn_on_action:
      - uart.write:
          id: uart1
          data: [0xA0, 0x01, 0x01, 0xA2]
    turn_off_action:
      - uart.write:
          id: uart1
          data: [0xA0, 0x01, 0x00, 0xA1]

  # Main power enable for all 12v accessories.
  - platform: template
    name: 'Mud Kitchen Main Power'
    id: main_power
    optimistic: true
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - uart.write:
          id: uart1
          data: [0xA0, 0x02, 0x01, 0xA3]
    turn_off_action:
      - uart.write:
          id: uart1
          data: [0xA0, 0x02, 0x00, 0xA2]

  # Pump to move water from the lower catch tank to the upper gravity feeding tank.
  - platform: template
    name: 'Mud Kitchen Pump'
    id: pump
    optimistic: true
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - uart.write:
          id: uart2
          data: [0xA0, 0x01, 0x01, 0xA2]
    turn_off_action:
      - uart.write:
          id: uart2
          data: [0xA0, 0x01, 0x00, 0xA1]

  # Spare relay. Might use for play house fan or lights in the future.
  - platform: template
    name: 'Mud Kitchen Relay 4'
    id: relay4
    optimistic: true
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - uart.write:
          id: uart2
          data: [0xA0, 0x02, 0x01, 0xA3]
    turn_off_action:
      - uart.write:
          id: uart2
          data: [0xA0, 0x02, 0x00, 0xA2]

sensor:

  # ADC to measure the battery voltage & trigger actions when it changes.
  - platform: adc
    attenuation: 11db
    pin: GPIO3
    name: "Mud Kitchen Battery"
    id: battery_voltage
    update_interval: 5ms
    accuracy_decimals: 3
    filters:
      - multiply: 15
      - sliding_window_moving_average:
          window_size: 600
          send_every: 600
    on_value_range:

      # Provide power to pumps and lights above a voltage that indicate the battery is charged enough.
      - above: 12.0
        then:
          - switch.turn_on: main_power
        
      # Remove power to pumps and lights under this voltage to prevent damaging discharge.
      - below: 7.0
        then:
        - switch.turn_off: main_power
        - delay: 200ms
        - switch.turn_off: pump

  # ADC to measure the voltage from the solar panel, mainly used when disconnected from the battery.
  # NOTE: There is a diode between the solar panel and battery.
  - platform: adc
    attenuation: 11db
    pin: GPIO5
    name: "Mud Kitchen Solar Panel"
    id: charge_source_voltage
    update_interval: 5ms
    accuracy_decimals: 3
    filters:
      - multiply: 15
      - sliding_window_moving_average:
          window_size: 600
          send_every: 600
    on_value:
      then:
        if:
          condition:
            lambda: >-
              bool enableCharging = true;

              float chargeSourceVoltage = id(charge_source_voltage).state;
              float batteryVoltage = id(battery_voltage).state;
              float maximumBatteryVoltage = 14;

              float minChargeVoltage = 16;
              if (id(connect_solar_panel).state) {
                minChargeVoltage = 4.0;
              }
              ESP_LOGI("charge_source_voltage", "minChargeVoltage = %f", minChargeVoltage);

              if (chargeSourceVoltage < minChargeVoltage){
                ESP_LOGI("charge_source_voltage", "chargeSourceVoltage < minChargeVoltage");
                enableCharging = false;
              }

              if (chargeSourceVoltage < batteryVoltage) {
                ESP_LOGI("charge_source_voltage", "chargeSourceVoltage < batteryVoltage");
                enableCharging = false;
              }
              
              if (batteryVoltage > maximumBatteryVoltage) {
                ESP_LOGI("charge_source_voltage", "batteryVoltage > maximumBatteryVoltage");
                enableCharging = false;
              }

              return enableCharging;
          then:
            if:
              condition:
                switch.is_off: connect_solar_panel
              then:
                switch.turn_on: connect_solar_panel
          else:
            if:
              condition:
                switch.is_on: connect_solar_panel
              then:
                - switch.turn_off: connect_solar_panel
                - delay: 200ms
                - switch.turn_off: main_power
                - delay: 200ms
                - switch.turn_off: pump


  # ADC to measure the voltage on the reed switch circuit.
  # One reed switch turns on when the lower catch tank has some water.
  # The other reed switch turns on when the upper gravity feeding tank is not full.
  # Relays are connected in series and have a pull down.
  # This ADC is technically just a binary sensor.
  - platform: adc
    attenuation: 11db
    pin: GPIO7
    name: "Mud Kitchen Level Sensor"
    update_interval: 5ms
    accuracy_decimals: 3
    filters:
      - multiply: 15
      - sliding_window_moving_average:
          window_size: 600
          send_every: 600
    on_value_range:

      # Level sensor senses the top tank is low and the bottom one is high.
      # Turns on the pump if the main power is on.
      - above: 8
        then:
          if:
            condition:
              switch.is_on: main_power
            then:
              script.execute: limited_time_pump
      
      # Turns off the pump if either tank is not ready.
      - below: 5
        then:
        - switch.turn_off: pump


script:

  # To prevent damage to the pump, we only allow the pump to run for a maximum time.
  # The relay will be reset when the main power supply drops under it's threshold, I should make it a timer to be safe.
  - id: limited_time_pump
    mode: restart     # Pump will be kept on during time
                      # the latest time the script is executed
    then:
      - switch.turn_on: pump
      - delay: 2 hours
      - switch.turn_off: pump

  # Some times these serial relays don't listen to the command, usually because they clash with other command.
  # this will set the current state and trigger the command every 10 seconds
  - id: set_relays
    mode: restart
    then:
    - logger.log: "Setting relays"
    - if:
        condition:
          switch.is_on: connect_solar_panel
        then:
          - switch.turn_on: connect_solar_panel
          - logger.log: "connect_solar_panel turned on"
        else:
          - switch.turn_off: connect_solar_panel
          - logger.log: "connect_solar_panel turned off"

    - if:
        condition:
          switch.is_on: main_power
        then:
          - switch.turn_on: main_power
          - logger.log: "main_power turned on"
        else:
          - switch.turn_off: main_power
          - logger.log: "main_power turned off"

    - if:
        condition:
          switch.is_on: pump
        then:
          - switch.turn_on: pump
          - logger.log: "pump turned on"
        else:
          - switch.turn_off: pump
          - logger.log: "pump turned off"

    - if:
        condition:
          switch.is_on: relay4
        then:
          - switch.turn_on: relay4
          - logger.log: "relay4 turned on"
        else:
          - switch.turn_off: relay4
          - logger.log: "relay4 turned off"

    - delay: 10s

    # Call this script again after 10 seconds
    - script.execute: set_relays
